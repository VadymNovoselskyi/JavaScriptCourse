{"mappings":"AAAA,MAAM,QAAQ,SAAS,aAAa,CAAC;AACrC,MAAM,aAAa,SAAS,aAAa,CAAC;AAC1C,MAAM,MAAM,WAAW,UAAU,CAAC;AAClC,MAAM,aAAa,SAAS,aAAa,CAAC;AAC1C,MAAM,UAAU,WAAW,UAAU,CAAC;AACtC,MAAM,eAAe,IAAI,OAAO,YAAY;AAE5C,MAAM,gBAAgB,SAAS,gBAAgB,CAC3C;AAEJ,MAAM,UAAU;IACZ,MAAM;IACN,OAAO;AACX;AAEA,SAAS,mBAAmB,KAAK;IAC7B,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,MAAM,aAAa;IAC3C,OAAO,CAAC,KAAK,GAAG,WAAW;AAC/B;AACA,cAAc,OAAO,CAAC,CAAC,QACnB,MAAM,gBAAgB,CAAC,SAAS;AAGpC,eAAe;IACX,MAAM,SAAS,MAAM,UAAU,YAAY,CAAC,YAAY,CAAC;QACrD,OAAO;YAAE,OAAO;YAAM,QAAQ;QAAI;IACtC;IAEA,MAAM,SAAS,GAAG;IAClB,MAAM,MAAM,IAAI;IAEhB,WAAW,KAAK,GAAG,MAAM,UAAU;IACnC,WAAW,MAAM,GAAG,MAAM,WAAW;IAErC,WAAW,KAAK,GAAG,MAAM,UAAU;IACnC,WAAW,MAAM,GAAG,MAAM,WAAW;AACzC;AAEA,eAAe;IACX,MAAM,QAAQ,MAAM,aAAa,MAAM,CAAC;IAExC,QAAQ,SAAS,CAAC,GAAG,GAAG,WAAW,KAAK,EAAE,WAAW,MAAM;IAC3D,MAAM,OAAO,CAAC,CAAC,OAAS,OAAO;IAC/B,IAAI,SAAS,CAAC,GAAG,GAAG,WAAW,KAAK,EAAE,WAAW,MAAM;IAEvD,sBAAsB;AAC1B;AAEA,SAAS,OAAO,EAAE,aAAa,IAAI,EAAE;IACjC,IAAI,cAAc,GAAG;IACrB,QAAQ,cAAc,GAAG;IACzB,IAAI,SAAS,CACT,OACA,KAAK,CAAC,EACN,KAAK,CAAC,EACN,KAAK,KAAK,EACV,KAAK,MAAM,EACX,KAAK,CAAC,EACN,KAAK,CAAC,EACN,QAAQ,IAAI,EACZ,QAAQ,IAAI;IAGhB,MAAM,UAAU,KAAK,KAAK,GAAI,CAAA,AAAC,CAAA,QAAQ,KAAK,GAAG,CAAA,IAAK,CAAA;IACpD,MAAM,UAAU,KAAK,MAAM,GAAI,CAAA,AAAC,CAAA,QAAQ,KAAK,GAAG,CAAA,IAAK,CAAA;IACrD,QAAQ,SAAS,CACb,YACA,KAAK,CAAC,EACN,KAAK,CAAC,EACN,QAAQ,IAAI,EACZ,QAAQ,IAAI,EACZ,KAAK,CAAC,GAAG,SACT,KAAK,CAAC,GAAG,SACT,KAAK,KAAK,GAAG,UAAU,GACvB,KAAK,MAAM,GAAG,UAAU;AAEhC;AAEA,gBAAgB,IAAI,CAAC","sources":["pixelated-face.js"],"sourcesContent":["const video = document.querySelector(\".webcam\");\nconst faceCanvas = document.querySelector(\".face\");\nconst ctx = faceCanvas.getContext(\"2d\");\nconst blurCanvas = document.querySelector(\".blur\");\nconst faceCtx = blurCanvas.getContext(\"2d\");\nconst faceDetector = new window.FaceDetector();\n\nconst optionsInputs = document.querySelectorAll(\n    '.controls input[type=\"range\"]'\n);\nconst options = {\n    SIZE: 14,\n    SCALE: 1.3,\n};\n\nfunction handleOptionsInput(event) {\n    const { value, name } = event.currentTarget;\n    options[name] = parseFloat(value);\n}\noptionsInputs.forEach((input) =>\n    input.addEventListener(\"input\", handleOptionsInput)\n);\n\nasync function populateVideo() {\n    const stream = await navigator.mediaDevices.getUserMedia({\n        video: { width: 1080, height: 720 },\n    });\n\n    video.srcObject = stream;\n    await video.play();\n\n    faceCanvas.width = video.videoWidth;\n    faceCanvas.height = video.videoHeight;\n\n    blurCanvas.width = video.videoWidth;\n    blurCanvas.height = video.videoHeight;\n}\n\nasync function detect() {\n    const faces = await faceDetector.detect(video);\n\n    faceCtx.clearRect(0, 0, blurCanvas.width, blurCanvas.height);\n    faces.forEach((face) => censor(face));\n    ctx.clearRect(0, 0, blurCanvas.width, blurCanvas.height);\n\n    requestAnimationFrame(detect);\n}\n\nfunction censor({ boundingBox: face }) {\n    ctx.imageSmoothing = false;\n    faceCtx.imageSmoothing = false;\n    ctx.drawImage(\n        video,\n        face.x,\n        face.y,\n        face.width,\n        face.height,\n        face.x,\n        face.y,\n        options.SIZE,\n        options.SIZE\n    );\n\n    const offsetX = face.width * ((options.SCALE - 1) / 2);\n    const offsetY = face.height * ((options.SCALE - 1) / 2);\n    faceCtx.drawImage(\n        faceCanvas,\n        face.x,\n        face.y,\n        options.SIZE,\n        options.SIZE,\n        face.x - offsetX,\n        face.y - offsetY,\n        face.width + offsetX * 2,\n        face.height + offsetY * 2\n    );\n}\n\npopulateVideo().then(detect);\n"],"names":[],"version":3,"file":"face.78b1ac0f.js.map","sourceRoot":"/__parcel_source_root/"}